name: Unit Tests, Test Coverage and Dockerization of the Fast API application in CI/CD environment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  
  run_unit_tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: 2310
          POSTGRES_DB: test_db
        ports:
          - 2310:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run unit tests and save coverage output
        env:
          DATABASE_URL: postgresql+psycopg2://test_user:2310@localhost:2310/test_db
        run: poetry run pytest --cov=app tests/ | tee pytest-coverage.txt

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: pytest-coverage.txt
          path: pytest-coverage.txt
  
  # build_and_publish:
  #   needs: run_unit_tests 
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2

  #   - name: Login to DockerHub
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       push: true
  #       tags: ${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest

  #   - name: Image digest
  #     run: echo ${{ steps.build_and_publish.outputs.digest }}
